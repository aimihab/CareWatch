//
//  SocketClient.m
//  Q2_local
//
//  Created by Vecklink on 14-7-27.
//  Copyright (c) 2014年 Joe. All rights reserved.
//
#import <AudioToolbox/AudioToolbox.h>
#import "SocketClient.h"
#import "ChildDev.h"
#import "DataBaseSimple.h"
#import "AppDelegate.h"

typedef NS_ENUM(NSInteger,DateFormatType)
{
    DateFormatTypeOne, //yyyyMMdd
    DateFormatTypeTwo, //yyyyMMddHHmmss
    DateFormatTypeThree, //yyyy-MM-dd hh:mm:ss
    DateFormatTypeFour, //yyyyMM
};


#define _OperationCount 1
#define _Send_Ping_packet_interval 60

//#define _SocketHost @"watch-app.movnow.com" // 域名
//#define _SocketPost 8322

#define _SocketHost @"121.199.22.180" // 正式环境
#define _SocketPost 4007

@implementation SocketClient
{
    int num;
    
    SendCmdSuccess SendCmdSuccessBlock_;
    SendCmdFailure SendCmdFailureBlock_;
    
}

+(SocketClient *)Instance
{
    static SocketClient *_instance = nil;
    @synchronized(self) {
        if (_instance == nil) {
            _instance = [[SocketClient alloc] init];
        }
        return _instance;
    }
    return nil;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        // A(监听收对方发来的数据)  server（连接服务器）  B（对方）
        // 服务器socket
        serverSocket =[[AsyncSocket alloc] initWithDelegate:self];
        
        quene = [[NSOperationQueue alloc] init];
        [quene setMaxConcurrentOperationCount:_OperationCount];
    }
    return self;
}

-(void)connectToHost {
    if (![serverSocket isConnected]) {
        [serverSocket disconnect];
        [serverSocket connectToHost:_SocketHost onPort:_SocketPost error:nil];
    }
    else{
        NSLog(@"已经和服务器连接");
    }
}
-(void)sendLoginMsg {
    num =1;
    
    
    //    NSString *msg = [NSString stringWithFormat:@"{\"msgId\":\"%@\",\"type\":\"login\",\"version\":\"1.0.0\",\"userId\":%@, \"sessionId\":\"%@\"}\r\n",[NSString stringWithFormat:@"%d",num],[UserData Instance].uid, [UserData Instance].sessionId];
    
    NSString *header = @"I&A1";
    NSString *msg = [NSString stringWithFormat:@"{\"msgId\":%@,\"userId\":\"%@\"}",[NSString stringWithFormat:@"%d",num],[UserData Instance].uid];
    num++;
    NSString *lenth = [NSString stringWithFormat:@"%04lu%",(unsigned long)msg.length];
    
    NSString *dataStr = [NSString stringWithFormat:@"%@%@%@",header,lenth,msg];
    
    DLog(@"%@...%@",dataStr,lenth);
    
    NSData *data=[dataStr dataUsingEncoding:NSUTF8StringEncoding];
    
    
    [serverSocket writeData:data withTimeout:-1 tag:400];
    
    
}

-(void)disconnect {
    [serverSocket disconnect];
    [timer invalidate];
    timer = nil;
    NSLog(@"断开Socket连接");
}


#pragma mark - AsyncSocket.h Delegate

// 写数据成功 自动回调
-(void)onSocket:(AsyncSocket *)sock didWriteDataWithTag:(long)tag
{
    // 获取用户列表
    if (sock==serverSocket) {
        NSLog(@"向服务器%@发送消息成功",[sock connectedHost]);
    }
    // 继续监听
    [sock readDataWithTimeout:-1 tag:500];
}

// 成功连接后自动回调
-(void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port
{
    [sock readDataWithTimeout:-1 tag:200];
    NSLog(@"已经连接到服务器:%@",host);
    //发送登录消息
    [self sendLoginMsg];
}



// 客户端接收到了数据

-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag
{
    // 收到服务器给的消息
    if (sock==serverSocket) {
        
        NSLog(@"收到服务端%@消息：%@", [sock connectedHost], [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);
        
        //     NSString *recvStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
        NSString *recvStr = [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];
        
        NSArray *recvArr = [recvStr componentsSeparatedByString:@"\r\n"]; //从字符中分隔成n个元素的数组
        DLog(@"array = %@",recvArr);
        
        if (recvArr != nil && recvArr.count != 0) {
            
            for(NSString *str in recvArr){
                
                if ([str isEqualToString:@"" ] || str.length<=4) {
                    continue;
                }
                
                NSString *msgStr = [str substringFromIndex:4];
                NSData *msgData = [msgStr dataUsingEncoding:NSUTF8StringEncoding];
                NSDictionary *revDic = [NSJSONSerialization JSONObjectWithData:msgData options:NSJSONReadingMutableContainers error:nil];
                
                DLog(@"----%@",revDic);
                //收到ack包，开始发ping包
                if ([revDic[@"type"] isEqualToString:@"ack"]) {
                    if (timer == nil) {
                        timer = [NSTimer scheduledTimerWithTimeInterval:_Send_Ping_packet_interval target:self selector:@selector(sendSocketPingPacket) userInfo:nil repeats:YES];
                    }
                }
                
                /*********收到eq_stat(设备状态)包*********/
                if ([revDic[@"type"] isEqualToString:@"eq_stat"]) {
                    
                    
                    for (NSString *eqid in [UserData Instance].deviceDic.allKeys) {
                        
                        if ([eqid isEqualToString:revDic[@"eqId"]]) {
                            NSLog(@"收到%@设备状态 %@", eqid, ([revDic[@"ol"] isEqualToString:@"off"] ? @"off":@"on"));
                            
                            BOOL _online =[revDic[@"ol"] isEqualToString:@"off"] ? NO:YES;
                            BOOL _isgpsOn = [revDic[@"gpson"] isEqualToNumber:@(1)]?YES:NO;
                            
                            DeviceModel *dev = [UserData Instance].deviceDic[eqid];
                            
                            if (dev.isGpsOn != _isgpsOn) {
                                dev.isGpsOn = _isgpsOn;
                            }
                            
                            
                            if (dev.online != _online) {
                                
                                dev.online = _online;
                                if (!dev.online) {
                                    [[NSUserDefaults standardUserDefaults] setObject:@"0" forKey:[NSString stringWithFormat:@"%@-nowDist", dev.bindIMEI]];
                                    [[NSUserDefaults standardUserDefaults] synchronize];
                                    
                                }
                                
                                if (_didDevOnlineChange != NULL) {
                                    self.didDevOnlineChange(dev);
                                }
                            }
                            
                            int ele = ((NSNumber *)revDic[@"eqp"]).intValue;
                            if (dev.electricity != ele) {
                                dev.electricity = ele;
                                if ([[UserData Instance].likeDevIMEI isEqualToString:dev.bindIMEI]) {
                                    if (_didDevElectricityChange != NULL) {
                                        self.didDevElectricityChange(dev);
                                    }
                                }
                            }
                            if (dev.online && dev.electricity < 30) {
                                
                                
                                //   NSDateFormatter *dateformat=[[NSDateFormatter alloc] init];
                                //  [dateformat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
                                
                                NSDate *now = [NSDate date];
                                if(__APP.warnTime){
                                    
                                    double interval = [now timeIntervalSinceDate:__APP.warnTime];
                                    DLog(@"--------interval is %f",interval);
                                    
                                    if (interval>=0) {
                                        
                                        NSString *msgStr = [NSString stringWithFormat:NSLocalizedString(@"%@电量不足，请及时充电 \n设备号：%@，电量：%d", nil), dev.nickName, dev.bindIMEI, dev.electricity];
                                        NSLog(@"%@", msgStr);
                                        
                                        MessageModel *msg = [[MessageModel alloc] initWithContent:msgStr];
                                        [dev.messageArr addObject:msg];
                                        if (_didDevMsgArrChange) {
                                            self.didDevMsgArrChange();
                                        }
                                        
                                        
                                        [[MusicPlayerController Instance] playWithMusicItem:dev.musicItem isStop:YES];
                                        AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
                                        
                                        NSDate *nowAdd = [[NSDate alloc] initWithTimeIntervalSinceNow:1800];
                                        __APP.warnTime  = nowAdd;
                                        
                                        
                                        CustomIOS7AlertView *alerView = [[CustomIOS7AlertView alloc] initStyleZeroWithTitle:NSLocalizedString(@"提示", nil) message:[NSString stringWithFormat:@"%@%@",dev.nickName,NSLocalizedString(@"设备电量低,请及时充电!", nil)]];
                                        [alerView show];
                                        return;
                                        
                                    }
                                    
                                    
                                }else{
                                    
                                    NSString *msgStr = [NSString stringWithFormat:NSLocalizedString(@"%@电量不足，请及时充电 \n设备号：%@，电量：%d", nil), dev.nickName, dev.bindIMEI, dev.electricity];
                                    NSLog(@"%@", msgStr);
                                    
                                    MessageModel *msg = [[MessageModel alloc] initWithContent:msgStr];
                                    [dev.messageArr addObject:msg];
                                    if (_didDevMsgArrChange) {
                                        self.didDevMsgArrChange();
                                    }
                                    
                                    
                                    [[MusicPlayerController Instance] playWithMusicItem:dev.musicItem isStop:YES];
                                    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
                                    
                                    NSDate *nowAdd = [[NSDate alloc] initWithTimeIntervalSinceNow:1800];
                                    __APP.warnTime  = nowAdd;
                                    
                                    
                                    CustomIOS7AlertView *alerView = [[CustomIOS7AlertView alloc] initStyleZeroWithTitle:NSLocalizedString(@"提示", nil) message:[NSString stringWithFormat:@"%@%@",dev.nickName,NSLocalizedString(@"设备电量低,请及时充电!", nil)]];
                                    [alerView show];
                                    return;
                                    
                                }
                                
                            }
                            
                        }
                    }
                }
                
                
                /*****收到设备位置点信息*******/
                if ([revDic[@"type"] isEqualToString:@"eq_loc"]) {
                    
                    DeviceModel *dev = [UserData Instance].deviceDic[revDic[@"id"]];
                    if (!dev) {
                        return;
                    }
                    
                    NSDictionary *subRevDic = revDic[@"loc"][0];
                    
                    NSLog(@"NSDictionary=%@",subRevDic);
                    
                    if (subRevDic[@"ceil"]) {
                        
                        return;
                        
                        //基站定位
                        int mcc = ((NSString *)subRevDic[@"mcc"]).intValue;
                        int mnc = ((NSString *)subRevDic[@"mnc"]).intValue;
                        int cid = ((NSNumber *)subRevDic[@"ceil"][0][@"cid"]).intValue;
                        int lac = ((NSNumber *)subRevDic[@"ceil"][0][@"lac"]).intValue;
                        NSLog(@"mcc =%d %d %d %d", mcc, mnc, cid, lac);
                        //                22.54579926,113.95293427
                        //                int mcc = 460;
                        //                int mnc = 0;
                        //                int cid = 3873;
                        //                int lac = 10350;
                        
                        NSMutableData *reData = [self GetFormPostDataWithCid:cid mcc:mcc mnc:mnc lac:lac];
                        
                        NSURL *url = [NSURL URLWithString:@"http://203.208.46.147/glm/mmap"];
                        ASIFormDataRequest *request = [ASIFormDataRequest requestWithURL:url];
                        [request addRequestHeader:@"Content-Type" value:@"application/binary"];
                        [request setRequestMethod:@"POST"];
                        [request setPostBody:reData];
                        request.delegate = self;
                        request.tag = 99;
                        [request setUserInfo:[NSDictionary dictionaryWithObjectsAndKeys:revDic[@"id"], @"eqId", nil]];
                        [quene addOperation:request];
                        
                        //。。。Code
                    } else {
                        //gps定位
                        NSLog(@"GPS定位");
                        
                        CGFloat la = ((NSNumber *)subRevDic[@"la"]).doubleValue;
                        CGFloat lo = ((NSNumber *)subRevDic[@"lo"]).doubleValue;
                        la/=1000000;
                        lo/=1000000;
                        
                        NSDate *dt=[NSDate dateWithTimeIntervalSince1970:[subRevDic[@"t"] doubleValue]];
                        NSDateFormatter * df = [[NSDateFormatter alloc] init];
                        [df setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
                        NSString *regStr = [df stringFromDate:dt];
                        dev.locateTime=regStr;
                        NSLog(@"---%@",regStr);
                        
                        [self calculateDistWithDev:dev la:la lo:lo positioningType:NO];
                    }
                }
                
                
                /*****收到单点设备当前位置信息包*******/
                if([revDic[@"type"] isEqualToString:@"single-ind"])
                {
                    NSLog(@"收到单点信息");
                    
                    
                    DeviceModel *dev = [UserData Instance].deviceDic[revDic[@"eqId"]];
                    NSLog(@"bindIMEI=%@",dev.bindIMEI);
                    
                    if ([revDic[@"slType"] isEqualToString:@"lbs"]) {
                        dev.positioningType = 1;
                    }else if([revDic[@"slType"] isEqualToString:@"wifi"]){
                        dev.positioningType = 2;
                    }else{
                        dev.positioningType = 0;
                    }
                    
                    
                    NSDictionary *subRevDic = revDic[@"loc"][0];
                    CGFloat la = ((NSNumber *)subRevDic[@"la"]).doubleValue;
                    CGFloat lo = ((NSNumber *)subRevDic[@"lo"]).doubleValue;
                    NSLog(@"la = %f, lo = %f",la,lo);
                    //            la/=1000000;
                    //            lo/=1000000;
                    dev.la=la;
                    dev.lo=lo;
                    NSDate *dt=[NSDate dateWithTimeIntervalSince1970:[subRevDic[@"t"] doubleValue]];
                    NSDateFormatter * df = [[NSDateFormatter alloc] init];
                    //  [df setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
                    [df setDateFormat:@"yyyy-MM-dd"];
                    NSString *regStr = [df stringFromDate:dt];
                    dev.locateTime=regStr;
                    NSLog(@"la = %f, lo = %f",la,lo);
                    NSLog(@"regStr is %@",regStr);
                    
                    [[NSNotificationCenter defaultCenter] postNotificationName:@"sing_ind" object:nil userInfo:nil];
                    NSLog(@"发送");
                    //                    if(la>0 && lo>0 && regStr){
                    //                        // 插入数据库
                    //                        DataBaseSimple * simple = [DataBaseSimple shareInstance];
                    //                        ChildDev *model = [[ChildDev alloc] init];
                    //                        model.latitude = [NSString stringWithFormat:@"%f",la];
                    //                        model.longitude = [NSString stringWithFormat:@"%f",lo];
                    //                        model.date = regStr;
                    //                        model.devID = dev.bindIMEI;
                    //                        [simple insertTrackDataIntoDB:model];
                    //                    }
                    
                }
                
                /*****收到围栏提醒信息*******/
                if([revDic[@"type"] isEqualToString:@"fence-warn"])
                {
                    
                    DeviceModel *dev = [UserData Instance].deviceDic[revDic[@"eqId"]];
                    
                    
                    NSString *MgStr = [NSString stringWithFormat:NSLocalizedString(@"%@手表围栏预警已触发,请立刻查看处理", nil),dev.nickName];
                    MessageModel *msg = [[MessageModel alloc] initWithContent:MgStr];
                    [dev.messageArr addObject:msg];
                    
                    [[MusicPlayerController Instance] playWithMusicItem:dev.musicItem isStop:YES];
                    
                    
                    CustomIOS7AlertView *alerView = [[CustomIOS7AlertView alloc] initStyleZeroWithTitle:NSLocalizedString(@"提示", nil) message:[NSString stringWithFormat:@"%@%@",dev.nickName,NSLocalizedString(@"手表围栏预警已触发,请立刻查看处理", nil)]];
                    [alerView show];
                    return;
                    
                }

#if 0
                /*************收到手表脱落消息**************/
                
                if ([revDic[@"type"] isEqualToString:@"falloff"]) {
                    
                    DLog(@"收到设备脱落消息");
                    DeviceModel *dev = [UserData Instance].deviceDic[revDic[@"eqId"]];
                    
                    BOOL _isFallOff =[revDic[@"status"] isEqualToString:@"1"] ? YES:NO;
                    
                    if (dev.isFallOff != _isFallOff) {
                        
                        dev.isFallOff = _isFallOff;
                        
                        if (dev.isFallOff) {
                            
                            
                            NSString *MgStr = [NSString stringWithFormat:NSLocalizedString(@"%@手表未佩戴在手上,请立刻查看处理", nil),dev.nickName];
                            MessageModel *msg = [[MessageModel alloc] initWithContent:MgStr];
                            [dev.messageArr addObject:msg];
                            
                            BOOL turnOn = [[NSUserDefaults standardUserDefaults] boolForKey:@"fallOffBtn"];
                            if (turnOn) {
                                [[MusicPlayerController Instance] playWithMusicItem:dev.musicItem isStop:YES];
                                
                                CustomIOS7AlertView *alerView = [[CustomIOS7AlertView alloc] initStyleZeroWithTitle:NSLocalizedString(@"提示", nil) message:[NSString stringWithFormat:@"%@%@",dev.nickName,NSLocalizedString(@"手表未正确佩戴,请佩戴在合适的位置", nil)]];
                                [alerView show];
                                return;
                            }
                            
                            //   dev.isFallOff = NO; // 还原默认值
                        }
                        
                        if ([[UserData Instance].likeDevIMEI isEqualToString:dev.bindIMEI]){
                            if (_didDevisFallOffChange != NULL) {
                                self.didDevisFallOffChange(dev);
                            }
                        }
                    }
                }
                
                
                /***********收到记步数据推送消息***********/
                
                if ([revDic[@"type"] isEqualToString:@"sport"]) {
                    
                    DLog(@"收到记步数据包..");
                    
                    DeviceModel *dev = [UserData Instance].deviceDic[revDic[@"eqId"]];
                    
                    ChildDev *model = [ChildDev sharedInstance];
                    model.devID = dev.bindIMEI;
                    model.steps = [revDic[@"steps"] integerValue];
                    model.calories = [revDic[@"cal"] integerValue];
                    
                    // 插入数据库
                    //                   DataBaseSimple * simple = [DataBaseSimple shareInstance];
                    //                   [simple insertStepsDataIntoDB:model];
                }
                
                
                /*****收到心率包*******/
                if ([revDic[@"type"] isEqualToString:@"heart-rate"]) {
                    
                    NSLog(@"收到心率");
                    DeviceModel *dev = [UserData Instance].deviceDic[revDic[@"eqId"]];
                    if (!dev) {
                        return;
                    }
                    NSString *rateStr = revDic[@"rate"];
                    double heartRate = [rateStr doubleValue];
                    
                    //         ChildDev *model = [[ChildDev alloc] init];
                    
                    //  DeviceModel *dev = [UserData Instance].deviceDic[eqid];
                    
                    if (dev.heartRate != heartRate) {
                        self.didDevHeartrateChange(dev);
                    }
                }
 
#endif
                
                /**********收到设备权限推送消息***************/
                
                if ([revDic[@"type"] isEqualToString:@"admin"]) {
                    
                    
                    DeviceModel *dev = [UserData Instance].deviceDic[revDic[@"eqId"]];
                    
                    if ([revDic[@"isAdmin"] isEqualToNumber:@1]) {
                        
                        DLog(@"%@获取管理员权限",revDic[@"userId"]);
                        dev.isAdmin = 1;
                    }
                    
                }
                
                /*************收到指令状态返回信息*****************/
                
                //               if ([revDic[@"type"] isEqualToString:@"device"]) {
                //
                //                   NSString *typeStr = revDic[@"key"];//指令类型
                //
                //                   DLog(@"收到硬件指令返回状态...");
                //                   if([revDic[@"result"] isEqualToString:@"0"]){
                //
                //                       DLog(@"指令设置失败..");
                //
                //                       SendCmdFailureBlock_(typeStr);
                //
                //                   }else{
                //
                //                       DLog(@"指令设置成功..");
                //                       SendCmdSuccessBlock_(typeStr);
                //                   }
                //
                //               }
                
                
                
                
            }
            
        }
        
    }
    
    // 继续监听
    [sock readDataWithTimeout:-1 tag:100];
    
}

-(void)sendSocketPingPacket {
    if (![serverSocket isConnected]) {
        [self connectToHost];
    }
    
    NSString *header = @"I&A2";
    
    NSString *msg = [NSString stringWithFormat:@"{\"msgId\":%@,\"type\":\"ping\"}",[NSString stringWithFormat:@"%d",num]];
    num++;
    
    NSString *lenth = [NSString stringWithFormat:@"%04ld",msg.length];
    
    NSString *dataStr = [NSString stringWithFormat:@"%@%@%@",header,lenth,msg];
    
    DLog(@"......dataStr = %@",dataStr);
    
    NSData *data=[dataStr dataUsingEncoding:NSUTF8StringEncoding];
    
    [serverSocket writeData:data withTimeout:-1 tag:400];
}

-(void)calculateDistWithDev:(DeviceModel *)dev la:(CGFloat)la lo:(CGFloat)lo positioningType:(BOOL)pType{
    dev.la = la;
    dev.lo = lo;
    
    NSLog(@"开始计算距离");
    [[PhoneLocation Instance] setOnLocationFinish:^(CLLocation *phoneL) {
        [UserData Instance].location = phoneL;
        
        NSLog(@"AAAAAAAAAAAAAwDist");
        CLLocation *devL = [[PhoneLocation Instance] locationWithLa:la lo:lo];
        NSLog(@"手机位置 =%@\n ", phoneL);
        NSLog(@"设备位置：%@\n ", devL);
        //        CGFloat dist = [[PhoneLocation Instance] getDistanceWithDevLocation:devL phoneLocation:phoneL];
        CLLocationDistance dist = [phoneL distanceFromLocation:devL];
        NSLog(@"BBBBBBBBBBBwDist");
        
        //保存手机坐标和设备距离
        NSString *strD = [NSString stringWithFormat:@"%d", (int)dist];
        NSLog(@"CCCCCCCCCwDist  %@", strD);
        NSLog(@"DDDDDDDDDwDist  %d", strD.intValue);
        NSLog(@"dev =%@, dev.nowDist =%@", dev, [[NSUserDefaults standardUserDefaults] stringForKey:[NSString stringWithFormat:@"%@-nowDist", dev.bindIMEI]]);
        //        dev.nowDist = [NSNumber numberWithInt:strD.intValue];
        
        [[NSUserDefaults standardUserDefaults] setObject:strD forKey:[NSString stringWithFormat:@"%@-nowDist", dev.bindIMEI]];
        [[NSUserDefaults standardUserDefaults] synchronize];
        
        NSLog(@"设备离我%@米", [[NSUserDefaults standardUserDefaults] stringForKey:[NSString stringWithFormat:@"%@-nowDist", dev.bindIMEI]]);
        if (dist > dev.careDist) {
            NSLog(@"设备超出关爱距离%d米", [[NSUserDefaults standardUserDefaults] stringForKey:[NSString stringWithFormat:@"%@-nowDist", dev.bindIMEI]].intValue-dev.careDist);
            //。。。Code
            MessageModel *msg = [[MessageModel alloc] initWithContent:[NSString stringWithFormat:NSLocalizedString(@"您的宠物已经超出%d米的关爱范围啦，赶快去找找它吧", nil), dev.careDist]];
            [dev.messageArr addObject:msg];
            if (_didDevMsgArrChange) {
                self.didDevMsgArrChange();
            }
            
            //设置设备在线
            if (!dev.online) {
                dev.online = YES;
                if (!dev.electricity) {
                    dev.electricity = 40;
                }
                
                if (_didDevOnlineChange != NULL) {
                    self.didDevOnlineChange(dev);
                }
            }
            
            [[MusicPlayerController Instance] playWithMusicItem:dev.musicItem isStop:YES];
        }
    }];
    [[PhoneLocation Instance] startLocation];
}

#pragma mark - ASIHTTPRequestDelegate
-(void)requestFinished:(ASIHTTPRequest*)request
{
    NSLog(@"NSOperationQueue response:%@", [request responseString]);
    if (request.tag == 99) {
        NSLog(@"Google API response.length =%lu", [request responseData].length);
        
        const char *a = [[request responseData] bytes];
        
        int i=3;
        long long code = a[i]*256*256*256+a[i+1]*256*256+a[i+2]*256+a[i+3];
        if (!code) {
            i+=4;
            CGFloat la = a[i]*256*256*256+a[i+1]*256*256+a[i+2]*256+a[i+3];
            i+=4;
            CGFloat lo = a[i]*256*256*256+a[i+1]*256*256+a[i+2]*256+a[i+3];
            la /= 1000000.0;
            lo /= 1000000.0;
            NSLog(@"-----la:%f,  lo:%f", la, lo);
            
            DeviceModel *dev = [UserData Instance].deviceDic[[request userInfo][@"eqId"]];
            [self calculateDistWithDev:dev la:la lo:lo positioningType:NO];
        }
    }
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:[request responseData] options:NSJSONReadingMutableContainers error:nil];
    if (dic[@"battery"]) {
        return;
        
        NSLog(@"%@", request.userInfo[@"eqId"]);
        DeviceModel *dev = [UserData Instance].deviceDic[request.userInfo[@"eqId"]];
        dev.electricity = ((NSString *)dic[@"battery"]).intValue;
        if (dev.electricity < 30) {
            
            NSString *msgStr = [NSString stringWithFormat:NSLocalizedString(@"%@电量不足，请及时充电 \n设备号：%@，电量：%d", nil), dev.nickName, dev.bindIMEI, dev.electricity];
            NSLog(@"%@", msgStr);
            
            MessageModel *msg = [[MessageModel alloc] initWithContent:msgStr];
            [dev.messageArr addObject:msg];
            if (_didDevMsgArrChange) {
                self.didDevMsgArrChange();
            }
            [[MusicPlayerController Instance] playWithMusicItem:dev.musicItem isStop:YES];
            AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
            AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
            AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
        }
    }
}
-(void)requestFailed:(ASIHTTPRequest*)request
{
    NSLog(@"HttpRequest Error > ________%@\n\n______________url=%@\n\n______________%@\n", self, [request url] , [request error]);
}

#pragma mark - Google API
-(NSMutableData *) GetFormPostDataWithCid:(int)cellTowerId mcc:(int)mobileCountryCode mnc:(int) mobileNetworkCode lac:(int)locationAreaCode
{
    Byte pd[55] = {0};
    pd[1] = 14;     //0x0e;
    pd[16] = 27;    //0x1b;
    pd[47] = (Byte) 255;   //0xff;
    pd[48] = (Byte) 255;   //0xff;
    pd[49] = (Byte) 255;   //0xff;
    pd[50] = (Byte) 255;   //0xff;
    
    // GSM uses 4 digits while UTMS used 6 digits (hex)
    pd[28] = (cellTowerId > 65536) ? (Byte) 5 : (Byte) 3;
    
    [self Shift:pd :17 :mobileNetworkCode];
    [self Shift:pd :21 :mobileCountryCode];
    [self Shift:pd :31 :cellTowerId];
    [self Shift:pd :35 :locationAreaCode];
    [self Shift:pd :39 :mobileNetworkCode];
    [self Shift:pd :43 :mobileCountryCode];
    return [NSMutableData dataWithBytes:pd length:sizeof(pd)];
}
-(void) Shift:(Byte *)data :(int) startIndex :(int)leftOperand
{
    int rightOperand = 24;
    
    for (int i = 0; i < 4; i++, rightOperand -= 8)
    {
        data[startIndex++] = (Byte) ((leftOperand >> rightOperand) & 255);
    }
}
@end
